{"version":3,"sources":["logo.svg","Tabs.js","DocumentTitleFunction.js","Counter.js","Content.js","Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Tabs","_ref","titles","children","_useState","useState","_useState2","Object","slicedToArray","activeTab","setActiveTab","tabs","Children","toArray","react_default","a","createElement","className","map","tab","index","key","onClick","concat","DocumentTitleFunction","title","useEffect","document","Counter","count","setCount","src_DocumentTitleFunction","Content","n","Fragment","toConsumableArray","Array","keys","range","src_Counter","Logo","src","logo","alt","App","src_Tabs","src_Content","src_Logo_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oMCsBzBC,EApBF,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,OAAQC,EAAeF,EAAfE,SAAeC,EACHC,mBAAS,GADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9BK,EAD8BH,EAAA,GACnBI,EADmBJ,EAAA,GAE/BK,EAAOC,WAASC,QAAQV,GAE9B,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACZN,EAAKO,IAAI,SAACC,EAAKC,GAAN,OACRN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAOH,UAAU,YACzBH,EAAAC,EAAAC,cAAA,QAAMM,QAAS,kBAAMZ,EAAaU,IAAQH,UAAS,YAAAM,OAAcd,IAAcW,EAAQ,SAAW,iBAC/FlB,EAAOkB,QAKfT,EAAKF,YCDGe,EAde,SAAAvB,GAAe,IAAZwB,EAAYxB,EAAZwB,MAW/B,OAVAC,oBAAU,WAIR,OAHAC,SAASF,MAAT,eAAAF,OAAgCE,EAAhC,UAGO,WACLE,SAASF,MAAQ,MAKd,MCOMG,EAhBC,WAAM,IAAAxB,EACMC,mBAAS,GADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbyB,EADavB,EAAA,GACNwB,EADMxB,EAAA,GAGdmB,EAAK,eAAAF,OAAkBM,EAAlB,UAEX,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,CAAeN,MAAOA,IACtBX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQQ,GACrBX,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMQ,EAASD,EAAQ,IAAIZ,UAAU,mBAAtD,cCLN,IAYee,EAZC,SAAA/B,GAAW,IAARgC,EAAQhC,EAARgC,EACjB,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KARN,SAAeD,GACb,OAAO1B,OAAA4B,EAAA,EAAA5B,CAAI6B,MAAMH,GAAGI,QAQbC,CAAML,GAAGf,IAAI,SAAAG,GAAG,OACfP,EAAAC,EAAAC,cAACuB,EAAD,CAASlB,IAAKA,iCCHTmB,EANF,WACX,OACE1B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAMzB,UAAU,OAAO0B,IAAI,gBCO1BC,EARH,kBACV9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAM3C,OAAQ,CAAC,YAAa,YAAa,SACvCY,EAAAC,EAAAC,cAAC8B,EAAD,CAASb,EAAG,IACZnB,EAAAC,EAAAC,cAAC8B,EAAD,CAASb,EAAG,IACZnB,EAAAC,EAAAC,cAAC+B,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5ea0aed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Children, useState } from 'react';\n\nconst Tabs = ({ titles, children }) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const tabs = Children.toArray(children);\n\n  return (\n    <div className=\"d-flex flex-column h-100\">\n      <div className=\"nav nav-pills nav-fill my-2\">\n        {tabs.map((tab, index) => (\n          <div key={index} className=\"nav-item\">\n            <span onClick={() => setActiveTab(index)} className={`nav-link ${activeTab === index ? 'active' : 'text-primary'}`}>\n              {titles[index]}\n            </span>\n          </div>\n        ))}\n      </div>\n      {tabs[activeTab]}\n    </div>\n  );\n};\n\nexport default Tabs;\n","import { useEffect } from 'react';\n\nconst DocumentTitleFunction = ({ title }) => {\n  useEffect(() => {\n    document.title = `You clicked ${title} times`;\n    // console.log('Document title has changed');\n\n    return () => {\n      document.title = '';\n      // console.log('Document title has reset');\n    };\n  });\n\n  return null;\n};\n\nexport default DocumentTitleFunction;\n","import React, { useState } from 'react';\nimport DocumentTitle from './DocumentTitleFunction';\n// import DocumentTitle from './DocumentTitleClass';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n\n  const title = `You clicked ${count} times`;\n\n  return (\n    <div>\n      <DocumentTitle title={title}/>\n      <p className=\"mt-4\">{title}</p>\n      <button onClick={() => setCount(count + 1)} className=\"btn btn-success\">\n        Click me\n      </button>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport Counter from './Counter';\n\nfunction range(n) {\n  return [...Array(n).keys()];\n}\n\n\nconst Content = ({ n }) => {\n  return (\n    <div className=\"h-100 text-light text-center\">\n      <>\n        {range(n).map(key => (\n          <Counter key={key}/>\n        ))}\n      </>\n    </div>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport './Logo.css';\nimport logo from './logo.svg';\n\nconst Logo = () => {\n  return (\n    <img src={logo} className=\"Logo\" alt=\"React logo\"/>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport Tabs from './Tabs';\nimport Content from './Content';\nimport Logo from './Logo';\n\nconst App = () => (\n  <Tabs titles={['Counter 1', 'Counter 2', 'Logo']}>\n    <Content n={1}/>\n    <Content n={2}/>\n    <Logo/>\n  </Tabs>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}